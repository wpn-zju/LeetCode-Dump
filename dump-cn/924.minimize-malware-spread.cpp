class Solution {
public:
	class UnionFindVirus {
	public:
		vector<int> nodes;

		UnionFindVirus(int n) {
			nodes = vector<int>(n);
			for (int i = 0; i < n; ++i)
				nodes[i] = i;
		}

		int find(int x) {
			if (nodes[x] == x)
				return nodes[x];
			return nodes[x] = find(nodes[x]);
		}

		void unionEle(int a, int b) {
			int pa = find(a);
			int pb = find(b);
			if (pa != pb)
				nodes[pb] = pa;
		}
	};

	int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
		int targetIndex = INT_MAX;
		int minVirusNode = INT_MAX;
		int deleted = 0;
		while (deleted < initial.size()) {
			UnionFindVirus ufv(graph.size());

			for (int i = 0; i < graph.size(); ++i)
				for (int j = i; j < graph.size(); ++j)
					if (graph[i][j])
						ufv.unionEle(i, j);

			unordered_set<int> virus;
			for (int i = 0; i < initial.size(); ++i)
				if (i != deleted)
					virus.insert(ufv.find(initial[i]));

			int virusCount = 0;
			for (int i = 0; i < graph.size(); ++i)
				if (virus.count(ufv.find(ufv.nodes[i])))
					virusCount++;

			if (virusCount < minVirusNode) {
				minVirusNode = virusCount;
				targetIndex = initial[deleted];
			}
			else if (virusCount == minVirusNode)
				targetIndex = min(targetIndex, initial[deleted]);

			deleted++;
		}

		return targetIndex;
	}
};